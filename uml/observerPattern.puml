@startuml
'https://plantuml.com/class-diagram

interface SzenarioProgressObserver {

+{abstract} void onTrainingStart(SzenarioSession session)
+{abstract} void preTrainingStep(SzenarioSession session, long currentStep, double averageReward)
+{abstract} void postTrainingStep(SzenarioSession session, long currentStep, double averageReward)
+{abstract} void onTrainingEnd(SzenarioSession session, double averageReward)

}

class SzenarioSession {
-int currentStep
-Szenario szenario
-List<SzenarioProgressObserver> observer
--
+void start()
+SzenarioSession addObserver(SzenarioProgressObserver observer)
+Szenario getSzenario()
+int getCurrentStep()
--
-void execWhenPresent(Consumer<SzenarioProgressObserver> consumer)
}

interface SzenarioExecutionObserver {
+{abstract} void onActionStorePersisted(PersistedStoreInfo info)
}

class ExecutionService {
- AgentRepository agentRepository
- PolicyRepository policyRepository
- EnvironmentRepository environmentRepository
- ConfigService configService
- ActionValueRepository actionValueRepository
- RLAlgorithmRepository algorithmRepository
- PolicyVisualizerFactory policyVisualizerFactory

+ startTraining()
+ startEvaluation()
- createSzenario()
- queryStore()
- storeTrainedPolicy()
- createWrappedTrainingObserver()
- {static} Optional<String> makeStringOptional()
}

note right of SzenarioSession::execWhenPresent
    if notEmpty(observer) then
        foreach obs in observer
            consumer.accept(obs)
        endfor
    endif
end note

'note right of ExecutionService::createWrappedTrainingObserver
'end note

SzenarioSession o-- SzenarioProgressObserver
SzenarioProgressObserver <|-- SzenarioExecutionObserver
SzenarioExecutionObserver <..ExecutionService

@enduml