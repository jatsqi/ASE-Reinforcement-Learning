@startuml
'https://plantuml.com/class-diagram

abstract class Agent {
    #Environment environment
    #ActionSource actionSource
    #RLSettings settings
    #double averageReward
    #int totalActionsTaken
    --
    +{abstract} ActionDataPair transformAction(int action)
    ---
    +void executeNextAction()
    +double getCurrentAverageReward()
    #int collectActionFromSource()
}

class MovingAgent2D {
    -{static} Map<Integer, Action> ACTION_INT_TO_ACTION_MAPPING
    +ActionDataPair transformAction(int action)
}

class FlatMovingPullAgent {
    -{static} Map<Integer, Action> ACTION_INT_TO_ACTION_MAPPING
    +ActionDataPair transformAction(int action)
}

class Szenario {
    +DescriptorBundle metadata,
    +Agent agent
    +Environment environment
    +Policy policy
    +PolicyVisualizer visualizer
    +long maxSteps
    +RLSettings settings
}

class SzenarioSession {
    -int currentStep
    -Szenario szenario
    -List<SzenarioProgressObserver> observer
    --
    +void start()
    +SzenarioSession addObserver(SzenarioProgressObserver observer)
    +Szenario getSzenario()
    +int getCurrentStep()
    --
    -void execWhenPresent(Consumer<SzenarioProgressObserver> consumer)
}

note left of SzenarioSession::start
    ...
    while(remainingSteps > 0) do
        environment.tick()

        // "agent" kann beliebige Subklasse
        // von Agent sein.
        // Subklasse überschreibt
        // executeNextAction()
        agent.executeNextAction()
    endwhile
    ...
end note

note right of Agent::executeNextAction
    Definiert Verhalten, welches für
    JEDEN Agenten gleich ist.

    Cache alten Zustand der Umgebung
    Hole Aktion von ActionSource
    Transformiere Aktion über "transformAction"
    Führe Aktion aus
    Beobachte neuen Zustand der Umgebung
    Gib Reward an ActionSource weiter
    Aktualisiere interne Belohnungsschätzung
end note

Agent <|-- FlatMovingPullAgent
Agent <|-- MovingAgent2D

Szenario o-- Agent
Szenario --o SzenarioSession

@enduml