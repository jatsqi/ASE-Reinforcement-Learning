@startuml
'https://plantuml.com/class-diagram

abstract class Agent {
    #Environment environment
    #ActionSource actionSource
    #RLSettings settings
    #double averageReward
    #int totalActionsTaken
    --
    +{abstract} ActionDataPair transformAction(int action)
    ---
    +void executeNextAction()
    +double getCurrentAverageReward()
    #int collectActionFromSource()
}

class Szenario {
    +DescriptorBundle metadata,
    +Agent agent
    +Environment environment
    +Policy policy
    +PolicyVisualizer visualizer
    +long maxSteps
    +RLSettings settings
}

class ActionDataPair {
    +Action action
    +int data
}

interface ActionSource {
    +{abstract}int selectAction(int state)
    +{abstract}int selectBestAction(int state)
    +{abstract}void criticiseAction(int oldState, int action, int newState, double reward)
}

interface Environment {
    +{abstract}boolean executeAction(Action action, int data);
    +{abstract}int getCurrentState();
    +{abstract}int getStateSpace();
    +{abstract}void tick();
}

class SzenarioSession {
    -int currentStep
    -Szenario szenario
    -List<SzenarioProgressObserver> observer
    --
    +void start()
    +SzenarioSession addObserver(SzenarioProgressObserver observer)
    +Szenario getSzenario()
    +int getCurrentStep()
    --
    -void execWhenPresent(Consumer<SzenarioProgressObserver> consumer)
}

note left of SzenarioSession::start
    ...
    while(remainingSteps > 0) do
        environment.tick()

        // "agent" kann beliebige Subklasse
        // von Agent sein.
        // Subklasse überschreibt
        // executeNextAction()
        agent.executeNextAction()
    endwhile
    ...
end note

note right of Agent::executeNextAction
    Definiert Verhalten, welches für
    JEDEN Agenten gleich ist.

    Cache alten Zustand der Umgebung
    Hole Aktion von ActionSource
    Transformiere Aktion über "transformAction"
    Führe Aktion aus
    Beobachte neuen Zustand der Umgebung
    Gib Reward an ActionSource weiter
    Aktualisiere interne Belohnungsschätzung
end note

Szenario o-- Environment
Szenario o-- Agent

Szenario --o SzenarioSession
'Agent --o SzenarioSession : Teil über Szenario Klasse
Agent ..> ActionDataPair
Agent o-- Environment
Agent o-- ActionSource

@enduml